import json
from random import randint
from aiogram.utils.keyboard import InlineKeyboardBuilder
import ai
from aiogram import types
import languages

class Racing():
    def __init__(self):
        self.horses = [1, 1, 1, 1]
        self.is_finished = False
        self.winner = None
    
    async def go(self):
        horse_number = randint(0, 3)
        self.horses[horse_number] += 1
        for horse in self.horses:
            if horse == 5:
                self.is_finished = True
                self.winner = self.horses.index(horse) + 1


    def __str__(self):
        out = ""
        for c, i in enumerate(self.horses):
            out +=  f"{c+1}. " + "üü©"*i + "\n"
        return out
    
class TicTacToe():
    def __init__(self):
        self.board = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    
    async def place(self, x, y, player):
        self.board[x][y] = player

    async def ai_place(self):
        self.board = ai.TicTacToe(self.board)
        

    async def check_win(self):
        evaluate = ai.xo.evaluate(self.board)
        return evaluate != 0
        
    async def check_tie(self):
        for x in self.board:
            for y in x:
                if y == 0:
                    return False
        return True


    async def as_markup(self):
        builder = InlineKeyboardBuilder()
        x_index = 0
        for x in self.board:
            y_index = 0
            for y in x:           
                button = types.InlineKeyboardButton(text=await xo_emojinator(y), callback_data=f"xo {x_index}-{y_index}")
                if y_index == 0:
                    builder.row(button)
                else:
                    builder.add(button)
                y_index += 1
            x_index += 1
        return builder.as_markup()

async def riddle_dicter(riddle):
    try:
        riddle  = riddle.replace("```json", "").replace("```", "")
        new_riddle = json.loads(riddle)
        if set(new_riddle.keys()) == {'question', 'answer'}:
            return new_riddle
        else:
            return None
    except:
        return None

async def xo_emojinator(number: list[0, 1, 2]):
        match number:
            case 0:
                return "üü™"
            case 1:
                return "üîµ"
            case 2:
                return "‚ùå"

async def get_language(user: types.User):
    code = user.language_code
    if code in languages.langs:
        return code
    else:
        return "en"

# –ß—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –º–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª keyboards.py, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–Ω—å—à–µ –±—ã–ª —É –º–µ–Ω—è, —è —Å–æ–∑–¥–∞–ª —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é. –û–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å—Å—è –≤ main.py
async def simple_keyboards(user=None, **buttons):
    builder = InlineKeyboardBuilder()
    for item in buttons.items():
        # –ü—Ä–∏–∫–æ–ª –≤ —Ç–æ–º, —á—Ç–æ –∫–ª—é—á–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–∞–ø–∏—Å–∞–Ω—ã —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã, –∞ –∫–Ω–æ–ø–∫–∏ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π, —Ç.–µ. –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç
        if item[1] in languages.buttons[await get_language(user)].keys() and user != None:
            text = languages.buttons[await get_language(user)][item[1]]
        else:
            text = item[1]
        button = types.InlineKeyboardButton(text=text, callback_data=item[0])
        builder.add(button)
    return builder.as_markup()